/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.aixtor.intranet.model.impl;

import com.aixtor.intranet.model.LeaveTracker;
import com.aixtor.intranet.model.LeaveTrackerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LeaveTracker service. Represents a row in the &quot;INTRANET_LeaveTracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LeaveTrackerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveTrackerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LeaveTrackerImpl
 * @generated
 */
public class LeaveTrackerModelImpl
	extends BaseModelImpl<LeaveTracker> implements LeaveTrackerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave tracker model instance should use the <code>LeaveTracker</code> interface instead.
	 */
	public static final String TABLE_NAME = "INTRANET_LeaveTracker";

	public static final Object[][] TABLE_COLUMNS = {
		{"leaveTrackerId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"totalCompen", Types.INTEGER}, {"bookedCompen", Types.INTEGER},
		{"totalEarned", Types.INTEGER}, {"bookedEarned", Types.INTEGER},
		{"totalFloater", Types.INTEGER}, {"bookedFloater", Types.INTEGER},
		{"totalUnpaid", Types.INTEGER}, {"bookedUnpaid", Types.INTEGER},
		{"createDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("leaveTrackerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalCompen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bookedCompen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalEarned", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bookedEarned", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalFloater", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bookedFloater", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalUnpaid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bookedUnpaid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table INTRANET_LeaveTracker (leaveTrackerId LONG not null primary key,userId LONG,totalCompen INTEGER,bookedCompen INTEGER,totalEarned INTEGER,bookedEarned INTEGER,totalFloater INTEGER,bookedFloater INTEGER,totalUnpaid INTEGER,bookedUnpaid INTEGER,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG,groupId LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table INTRANET_LeaveTracker";

	public static final String ORDER_BY_JPQL =
		" ORDER BY leaveTracker.leaveTrackerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY INTRANET_LeaveTracker.leaveTrackerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LEAVETRACKERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LeaveTrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveTrackerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveTrackerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveTrackerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveTracker.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveTracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LeaveTracker, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LeaveTracker, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveTracker, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LeaveTracker)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LeaveTracker, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LeaveTracker, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LeaveTracker)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LeaveTracker, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LeaveTracker, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<LeaveTracker, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LeaveTracker, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LeaveTracker, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LeaveTracker, Object>>();
		Map<String, BiConsumer<LeaveTracker, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LeaveTracker, ?>>();

		attributeGetterFunctions.put(
			"leaveTrackerId", LeaveTracker::getLeaveTrackerId);
		attributeSetterBiConsumers.put(
			"leaveTrackerId",
			(BiConsumer<LeaveTracker, Long>)LeaveTracker::setLeaveTrackerId);
		attributeGetterFunctions.put("userId", LeaveTracker::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<LeaveTracker, Long>)LeaveTracker::setUserId);
		attributeGetterFunctions.put(
			"totalCompen", LeaveTracker::getTotalCompen);
		attributeSetterBiConsumers.put(
			"totalCompen",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setTotalCompen);
		attributeGetterFunctions.put(
			"bookedCompen", LeaveTracker::getBookedCompen);
		attributeSetterBiConsumers.put(
			"bookedCompen",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setBookedCompen);
		attributeGetterFunctions.put(
			"totalEarned", LeaveTracker::getTotalEarned);
		attributeSetterBiConsumers.put(
			"totalEarned",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setTotalEarned);
		attributeGetterFunctions.put(
			"bookedEarned", LeaveTracker::getBookedEarned);
		attributeSetterBiConsumers.put(
			"bookedEarned",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setBookedEarned);
		attributeGetterFunctions.put(
			"totalFloater", LeaveTracker::getTotalFloater);
		attributeSetterBiConsumers.put(
			"totalFloater",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setTotalFloater);
		attributeGetterFunctions.put(
			"bookedFloater", LeaveTracker::getBookedFloater);
		attributeSetterBiConsumers.put(
			"bookedFloater",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setBookedFloater);
		attributeGetterFunctions.put(
			"totalUnpaid", LeaveTracker::getTotalUnpaid);
		attributeSetterBiConsumers.put(
			"totalUnpaid",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setTotalUnpaid);
		attributeGetterFunctions.put(
			"bookedUnpaid", LeaveTracker::getBookedUnpaid);
		attributeSetterBiConsumers.put(
			"bookedUnpaid",
			(BiConsumer<LeaveTracker, Integer>)LeaveTracker::setBookedUnpaid);
		attributeGetterFunctions.put("createDate", LeaveTracker::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LeaveTracker, Date>)LeaveTracker::setCreateDate);
		attributeGetterFunctions.put("createdBy", LeaveTracker::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<LeaveTracker, Long>)LeaveTracker::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", LeaveTracker::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LeaveTracker, Date>)LeaveTracker::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", LeaveTracker::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<LeaveTracker, Long>)LeaveTracker::setModifiedBy);
		attributeGetterFunctions.put("groupId", LeaveTracker::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LeaveTracker, Long>)LeaveTracker::setGroupId);
		attributeGetterFunctions.put("companyId", LeaveTracker::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LeaveTracker, Long>)LeaveTracker::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLeaveTrackerId() {
		return _leaveTrackerId;
	}

	@Override
	public void setLeaveTrackerId(long leaveTrackerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveTrackerId = leaveTrackerId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@Override
	public int getTotalCompen() {
		return _totalCompen;
	}

	@Override
	public void setTotalCompen(int totalCompen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalCompen = totalCompen;
	}

	@Override
	public int getBookedCompen() {
		return _bookedCompen;
	}

	@Override
	public void setBookedCompen(int bookedCompen) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookedCompen = bookedCompen;
	}

	@Override
	public int getTotalEarned() {
		return _totalEarned;
	}

	@Override
	public void setTotalEarned(int totalEarned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalEarned = totalEarned;
	}

	@Override
	public int getBookedEarned() {
		return _bookedEarned;
	}

	@Override
	public void setBookedEarned(int bookedEarned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookedEarned = bookedEarned;
	}

	@Override
	public int getTotalFloater() {
		return _totalFloater;
	}

	@Override
	public void setTotalFloater(int totalFloater) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalFloater = totalFloater;
	}

	@Override
	public int getBookedFloater() {
		return _bookedFloater;
	}

	@Override
	public void setBookedFloater(int bookedFloater) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookedFloater = bookedFloater;
	}

	@Override
	public int getTotalUnpaid() {
		return _totalUnpaid;
	}

	@Override
	public void setTotalUnpaid(int totalUnpaid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalUnpaid = totalUnpaid;
	}

	@Override
	public int getBookedUnpaid() {
		return _bookedUnpaid;
	}

	@Override
	public void setBookedUnpaid(int bookedUnpaid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookedUnpaid = bookedUnpaid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LeaveTracker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveTracker toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LeaveTracker>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveTrackerImpl leaveTrackerImpl = new LeaveTrackerImpl();

		leaveTrackerImpl.setLeaveTrackerId(getLeaveTrackerId());
		leaveTrackerImpl.setUserId(getUserId());
		leaveTrackerImpl.setTotalCompen(getTotalCompen());
		leaveTrackerImpl.setBookedCompen(getBookedCompen());
		leaveTrackerImpl.setTotalEarned(getTotalEarned());
		leaveTrackerImpl.setBookedEarned(getBookedEarned());
		leaveTrackerImpl.setTotalFloater(getTotalFloater());
		leaveTrackerImpl.setBookedFloater(getBookedFloater());
		leaveTrackerImpl.setTotalUnpaid(getTotalUnpaid());
		leaveTrackerImpl.setBookedUnpaid(getBookedUnpaid());
		leaveTrackerImpl.setCreateDate(getCreateDate());
		leaveTrackerImpl.setCreatedBy(getCreatedBy());
		leaveTrackerImpl.setModifiedDate(getModifiedDate());
		leaveTrackerImpl.setModifiedBy(getModifiedBy());
		leaveTrackerImpl.setGroupId(getGroupId());
		leaveTrackerImpl.setCompanyId(getCompanyId());

		leaveTrackerImpl.resetOriginalValues();

		return leaveTrackerImpl;
	}

	@Override
	public LeaveTracker cloneWithOriginalValues() {
		LeaveTrackerImpl leaveTrackerImpl = new LeaveTrackerImpl();

		leaveTrackerImpl.setLeaveTrackerId(
			this.<Long>getColumnOriginalValue("leaveTrackerId"));
		leaveTrackerImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		leaveTrackerImpl.setTotalCompen(
			this.<Integer>getColumnOriginalValue("totalCompen"));
		leaveTrackerImpl.setBookedCompen(
			this.<Integer>getColumnOriginalValue("bookedCompen"));
		leaveTrackerImpl.setTotalEarned(
			this.<Integer>getColumnOriginalValue("totalEarned"));
		leaveTrackerImpl.setBookedEarned(
			this.<Integer>getColumnOriginalValue("bookedEarned"));
		leaveTrackerImpl.setTotalFloater(
			this.<Integer>getColumnOriginalValue("totalFloater"));
		leaveTrackerImpl.setBookedFloater(
			this.<Integer>getColumnOriginalValue("bookedFloater"));
		leaveTrackerImpl.setTotalUnpaid(
			this.<Integer>getColumnOriginalValue("totalUnpaid"));
		leaveTrackerImpl.setBookedUnpaid(
			this.<Integer>getColumnOriginalValue("bookedUnpaid"));
		leaveTrackerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		leaveTrackerImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		leaveTrackerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		leaveTrackerImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		leaveTrackerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		leaveTrackerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));

		return leaveTrackerImpl;
	}

	@Override
	public int compareTo(LeaveTracker leaveTracker) {
		long primaryKey = leaveTracker.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LeaveTracker)) {
			return false;
		}

		LeaveTracker leaveTracker = (LeaveTracker)object;

		long primaryKey = leaveTracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveTracker> toCacheModel() {
		LeaveTrackerCacheModel leaveTrackerCacheModel =
			new LeaveTrackerCacheModel();

		leaveTrackerCacheModel.leaveTrackerId = getLeaveTrackerId();

		leaveTrackerCacheModel.userId = getUserId();

		leaveTrackerCacheModel.totalCompen = getTotalCompen();

		leaveTrackerCacheModel.bookedCompen = getBookedCompen();

		leaveTrackerCacheModel.totalEarned = getTotalEarned();

		leaveTrackerCacheModel.bookedEarned = getBookedEarned();

		leaveTrackerCacheModel.totalFloater = getTotalFloater();

		leaveTrackerCacheModel.bookedFloater = getBookedFloater();

		leaveTrackerCacheModel.totalUnpaid = getTotalUnpaid();

		leaveTrackerCacheModel.bookedUnpaid = getBookedUnpaid();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveTrackerCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveTrackerCacheModel.createDate = Long.MIN_VALUE;
		}

		leaveTrackerCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveTrackerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveTrackerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveTrackerCacheModel.modifiedBy = getModifiedBy();

		leaveTrackerCacheModel.groupId = getGroupId();

		leaveTrackerCacheModel.companyId = getCompanyId();

		return leaveTrackerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LeaveTracker, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LeaveTracker, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveTracker, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((LeaveTracker)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LeaveTracker>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LeaveTracker.class, ModelWrapper.class);

	}

	private long _leaveTrackerId;
	private long _userId;
	private int _totalCompen;
	private int _bookedCompen;
	private int _totalEarned;
	private int _bookedEarned;
	private int _totalFloater;
	private int _bookedFloater;
	private int _totalUnpaid;
	private int _bookedUnpaid;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _groupId;
	private long _companyId;

	public <T> T getColumnValue(String columnName) {
		Function<LeaveTracker, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LeaveTracker)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("leaveTrackerId", _leaveTrackerId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("totalCompen", _totalCompen);
		_columnOriginalValues.put("bookedCompen", _bookedCompen);
		_columnOriginalValues.put("totalEarned", _totalEarned);
		_columnOriginalValues.put("bookedEarned", _bookedEarned);
		_columnOriginalValues.put("totalFloater", _totalFloater);
		_columnOriginalValues.put("bookedFloater", _bookedFloater);
		_columnOriginalValues.put("totalUnpaid", _totalUnpaid);
		_columnOriginalValues.put("bookedUnpaid", _bookedUnpaid);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("leaveTrackerId", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("totalCompen", 4L);

		columnBitmasks.put("bookedCompen", 8L);

		columnBitmasks.put("totalEarned", 16L);

		columnBitmasks.put("bookedEarned", 32L);

		columnBitmasks.put("totalFloater", 64L);

		columnBitmasks.put("bookedFloater", 128L);

		columnBitmasks.put("totalUnpaid", 256L);

		columnBitmasks.put("bookedUnpaid", 512L);

		columnBitmasks.put("createDate", 1024L);

		columnBitmasks.put("createdBy", 2048L);

		columnBitmasks.put("modifiedDate", 4096L);

		columnBitmasks.put("modifiedBy", 8192L);

		columnBitmasks.put("groupId", 16384L);

		columnBitmasks.put("companyId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LeaveTracker _escapedModel;

}